{"componentChunkName":"component---src-templates-blog-template-js","path":"/Git/Git/","result":{"data":{"cur":{"id":"51bd7f00-fa7d-5d89-a1a0-198e427ad4f1","html":"<h2 id=\"목표\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%ED%91%9C\" aria-label=\"목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목표</h2>\n<ul>\n<li>버전 관리가 무엇인지 설명할 수 있다.</li>\n<li>Git의 동작 원리를 설명할 수 있다.</li>\n<li>Git의 기본 기능과 심화 기능을 실전에 사용할 수 있다.</li>\n</ul>\n<h1 id=\"git\" style=\"position:relative;\"><a href=\"#git\" aria-label=\"git permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git</h1>\n<p>Git은 분산 버전 관리 도구이다.</p>\n<h2 id=\"분산-버전-관리-시스템dvcs\" style=\"position:relative;\"><a href=\"#%EB%B6%84%EC%82%B0-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9Cdvcs\" aria-label=\"분산 버전 관리 시스템dvcs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>분산 버전 관리 시스템(DVCS)</h2>\n<ul>\n<li>저장소를 히스토리와 더불어 ‘전부’ 복제한다. 만약 서버에 문제가 생기더라도 이 복제물로 다시 작업을 시작할 수 있다.</li>\n<li>리모트 저장소가 존해하여 사람들이 동시에 다양한 방법으로 협업할 수 있다.</li>\n</ul>\n<h2 id=\"git의-목표\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EB%AA%A9%ED%91%9C\" aria-label=\"git의 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 목표</h2>\n<ul>\n<li>빠른 속도</li>\n<li>단순한 구조</li>\n<li>비선형적인 개발(동시 다발적인 브랜치)</li>\n<li>완벽한 분산</li>\n<li>Linux 커널 같은 대형 프로젝트에도 유용할 것</li>\n</ul>\n<h2 id=\"git의-기초\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EA%B8%B0%EC%B4%88\" aria-label=\"git의 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 기초</h2>\n<ul>\n<li>다른 버전 관리 시스템(VCS)과 Git의 가장 큰 차이점은 <code class=\"language-text\">데이터를 다루는 방법</code>에 있다.</li>\n</ul>\n<p>큰 틀에서 봤을 때 VCS 대부분은 관리하는 정보가 파일들의 목록이다. 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리한다.</p>\n<p>하지만 Git은 이런 식으로 데이터를 저장하지 않는다. 대신 Git은 데이터를 파일 시스템 스냅샷의 연속으로 취급하고 크기가 아주 작다.<br>\nGit은 커밋하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다.<br>\n파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않고, 이전 상태의 파일에 대한 링크만 저장한다.<br>\n즉, Git은 데이터를 <code class=\"language-text\">스냅샷의 스트림</code>처럼 취급한다.</p>\n<hr>\n<h2 id=\"git을-사용하면-얻는-이득\" style=\"position:relative;\"><a href=\"#git%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%96%BB%EB%8A%94-%EC%9D%B4%EB%93%9D\" aria-label=\"git을 사용하면 얻는 이득 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git을 사용하면 얻는 이득</h2>\n<h3 id=\"거의-모든-명령을-로컬에서-실행할-수-있다\" style=\"position:relative;\"><a href=\"#%EA%B1%B0%EC%9D%98-%EB%AA%A8%EB%93%A0-%EB%AA%85%EB%A0%B9%EC%9D%84-%EB%A1%9C%EC%BB%AC%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"거의 모든 명령을 로컬에서 실행할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>거의 모든 명령을 로컬에서 실행할 수 있다.</h3>\n<ul>\n<li>거의 모든 명령이 로컬 파일과 데이터만 사용하기 때문에 네트워크에 있는 다른 컴퓨터는 필요 없다. 즉, 오프라인 상태이거나 VPN에 연결하지 못해도 커밋할 수 있다.</li>\n</ul>\n<h3 id=\"git의-무결성\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EB%AC%B4%EA%B2%B0%EC%84%B1\" aria-label=\"git의 무결성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 무결성</h3>\n<ul>\n<li>Git은 데이터를 저장하기 전에 항상 체크섬을 구하고 그 체크섬으로 데이터를 관리한다.</li>\n<li>체크섬은 중복 검사의 한 형태로, 자료의 무결성을 보호하는 방법이다.</li>\n</ul>\n<hr>\n<h2 id=\"git의-세-가지-상태와-세-가지-단계\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%EC%83%81%ED%83%9C%EC%99%80-%EC%84%B8-%EA%B0%80%EC%A7%80-%EB%8B%A8%EA%B3%84\" aria-label=\"git의 세 가지 상태와 세 가지 단계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 세 가지 상태와 세 가지 단계</h2>\n<ul>\n<li><code class=\"language-text\">Committed</code>: 데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미한다.</li>\n<li><code class=\"language-text\">Modified</code>: 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것을 말한다.</li>\n<li><code class=\"language-text\">Staged</code>: 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미한다.</li>\n</ul>\n<p>이 세 가지 상태는 Git 프로젝트의 세 가지 단계와 연결돼 있다.</p>\n<ul>\n<li>Git Directory: Git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳을 말한다. 다른 컴퓨터에 있는 저장소를 Clone할 때 Git Directory가 만들어진다.</li>\n<li>Working Tree: 프로젝트의 특정 버전을 Checkout 한 것이다. Git Directory는 지금 작업하는 디스크에 있고 그 Directory 안에 압축된 데이터베이스에서 파일을 가져와서 Working Tree를 만드는 것이다.</li>\n<li>Staging Area: Git Directory에 있다. 단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장한다.</li>\n</ul>\n<p>Git Directory에 있는 파일들은 <code class=\"language-text\">Commited</code> 상태이다. 파일을 수정하고 Staging Area에 추가했다면 <code class=\"language-text\">Staged</code>이고, 추가하지 않았다면 <code class=\"language-text\">Modified</code>이다.<br>\nGit이 모르는 파일은 <code class=\"language-text\">Untracked</code>이다.\n파일을 수정하지 않았다면 <code class=\"language-text\">Unmodified</code>이다.</p>\n<h2 id=\"commit-순서\" style=\"position:relative;\"><a href=\"#commit-%EC%88%9C%EC%84%9C\" aria-label=\"commit 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commit 순서</h2>\n<ol>\n<li>Working Tree에서 파일을 수정한다.</li>\n<li>Staging Area에 파일을 Stage해서 커밋할 스냅샷을 만든다. 모든 파일을 추가할 수도 있고 선택하여 추가할 수도 있다.</li>\n<li>Staging Area에 있는 파일들을 commit해서 Git Directory에 스냅샷으로 저장한다.</li>\n</ol>\n<h1 id=\"git-명령어심화\" style=\"position:relative;\"><a href=\"#git-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%8B%AC%ED%99%94\" aria-label=\"git 명령어심화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git 명령어(심화)</h1>\n<h2 id=\"add\" style=\"position:relative;\"><a href=\"#add\" aria-label=\"add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>add</h2>\n<ul>\n<li>staging area에 파일을 올릴 때 사용</li>\n<li>사용 방법\n<ul>\n<li>파일 전체 올리는 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git add .</code></pre></div>\n</li>\n</ul>\n</li>\n<li>vsc에서 소스제어에서 특정 파일만 올리거나 전체를 올리는 등 쉽게 제어가 가능하다.</li>\n</ul>\n<h2 id=\"commit\" style=\"position:relative;\"><a href=\"#commit\" aria-label=\"commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>commit</h2>\n<ul>\n<li>사용 방법\n<ul>\n<li>커밋 메세지 작성하는 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git commit -m '(커밋 제목)'</code></pre></div>\n</li>\n<li>직전 커밋의 이름을 변경하고 싶은 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git commit --amend -m '(변경할 커밋 제목)'</code></pre></div>\n</li>\n<li>직전 커밋의 내용을 변경하고 싶은 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git commit --amend</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"tag\" style=\"position:relative;\"><a href=\"#tag\" aria-label=\"tag permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tag</h2>\n<ul>\n<li>\n<p>git log가 길어진다면 어떤 특정한 부분으로 가기 어렵기 때문에 tag를 이용하여 북마크처럼 사용한다.</p>\n</li>\n<li>\n<h3 id=\"sementic-version\" style=\"position:relative;\"><a href=\"#sementic-version\" aria-label=\"sementic version permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>sementic version</h3>\n<p>ex) v2.0.0 (major.minor.fix)</p>\n</li>\n<li>\n<p>tag 생성 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git tag v1.0.0 0adb2dd\n  // (tag name) (특정 commit 해시코드)</code></pre></div>\n</li>\n<li>\n<p>해당 tag로 이동하는 방법: git checkout (tag name)</p>\n</li>\n</ul>\n<h2 id=\"rebase\" style=\"position:relative;\"><a href=\"#rebase\" aria-label=\"rebase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rebase</h2>\n<ul>\n<li>\n<p>주의사항</p>\n<ul>\n<li>\n<p>rebase 하면 안되는 경우</p>\n<blockquote>\n<p>다른 개발자와 한 브랜치에서 개발하는 경우<br>\n이미 history가 서버에 업로드된 경우</p>\n</blockquote>\n</li>\n<li>\n<p>Rebase는 <code class=\"language-text\">기존의 커밋을 그대로 사용하는 것이 아니라 내용은 같지만 다른 커밋을 새로 만든다.</code></p>\n</li>\n<li>\n<p>다른 개발자와 한 브랜치에서 개발하고 있다면 rebase 하고 push를 하여 서버에 변경된 정보를 업데이트 하게 된다면 커밋이 완전 달라지기 때문에 merge conflict이 발생할 수 있다.</p>\n</li>\n<li>\n<p>서버에 업로드 되지 않는 나의 로컬에 한해서는 rebase를 해도 된다.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>rebase 과정</p>\n<p>글로는 설명하기 힘들어 그림으로 설명되어 있는 <a href=\"https://git-scm.com/book/ko/v2/Git-%EB%B8%8C%EB%9E%9C%EC%B9%98-Rebase-%ED%95%98%EA%B8%B0\">공식사이트</a>를 올립니다.</p>\n</li>\n<li>\n<p>사용 방법</p>\n<ul>\n<li>master와 feature 두 브랜치만 있는 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git checkout feature\n  git rebase master</code></pre></div>\n</li>\n<li>(master)와 (base branch인 feature)과 (feature에서 파생된 브랜치 feat2)에서 feat2 브랜치를 master에 rebase 하는 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git checkout master\n  git rebase --onto master feature feat2\n  // (rebase 붙일 곳) (base branch name) (파생된 branch name)</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>옵션</p>\n<p>-i</p>\n</li>\n</ul>\n<h2 id=\"cherry-pick\" style=\"position:relative;\"><a href=\"#cherry-pick\" aria-label=\"cherry pick permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cherry-pick</h2>\n<ul>\n<li>작업하는 branch에서 딱 하나의 커밋만 다른 브랜치에 머지하고 싶을 때 사용한다.\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  // master에 붙이려고 할 때\n  git checkout master\n  git cherry-pick (특정 커밋 해시코드)</code></pre></div>\n</li>\n</ul>\n<h2 id=\"stash\" style=\"position:relative;\"><a href=\"#stash\" aria-label=\"stash permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>stash</h2>\n<ul>\n<li>\n<p>작업하는 내용을 잠시 저장할 수 있다.</p>\n</li>\n<li>\n<p>사용 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  // stash 하기\n  git stash push -m '(이름)'\n\n  // stash한 list를 보기\n  git stash list\n\n  // stash@{1} 처럼 list 중 하나를 지정하여 들고오기\n  git stash apply stash@{1}\n\n  // stash를 삭제하기\n  git stash drop stash@{1}</code></pre></div>\n</li>\n<li>\n<p>소스트리를 사용하면 훨씬 편하게 사용할 수 있다.</p>\n</li>\n</ul>\n<h2 id=\"reset\" style=\"position:relative;\"><a href=\"#reset\" aria-label=\"reset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reset</h2>\n<ul>\n<li>\n<p>특정 커밋으로 초기화 시켜줄 수 있는 명령어이다.</p>\n</li>\n<li>\n<p>옵션</p>\n<ul>\n<li>\n<p>soft</p>\n<p>history에서 삭제하면서 staging area로 초기화하고 싶을 떄</p>\n</li>\n<li>\n<p>mixed</p>\n<p>history에서 삭제하면서 working directory로 초기화하고 싶을 떄</p>\n</li>\n<li>\n<p>hard</p>\n<p>완전히 작업했던 내용도 삭제하고 싶을 때</p>\n</li>\n</ul>\n</li>\n<li>\n<p>사용 방법</p>\n<ul>\n<li>HEAD에서 3번째 앞까지 초기화 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git reset --옵션 HEAD~3</code></pre></div>\n</li>\n<li>특정 커밋으로 초기화하는 경우\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git reset --옵션 (특정 해시코드)</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"reflog\" style=\"position:relative;\"><a href=\"#reflog\" aria-label=\"reflog permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reflog</h2>\n<ul>\n<li>이전의 HEAD가 기록한 것(커밋)으로 다시 되돌아갈 수 있다.</li>\n<li>실수로 reset —hard한 경우 유용하게 쓰일 수 있다.</li>\n<li>사용 방법\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git reflog\n  // 다시 되돌리고 싶은 기록의 해시코드를 복사하여\n  git reset --hard (해시코드)</code></pre></div>\n</li>\n<li>다만 커밋하지 않은 파일이 있을 때 reset —hard한 경우 그 파일을 되찾기 힘들다. 그러므로 git reset —hard를 주의해서 사용하자.</li>\n<li>extension에서 <code class=\"language-text\">Local History</code>를 사용한다면 커밋하지 않아도 되돌릴 수 있다고 한다.</li>\n</ul>\n<h2 id=\"revert\" style=\"position:relative;\"><a href=\"#revert\" aria-label=\"revert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>revert</h2>\n<ul>\n<li>해당하는 커밋의 변경사항을 다시 되돌려는, 취소하는 명령어이다.</li>\n<li>사용 방법\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git revert (특정 해시코드 or HEAD~index)</code></pre></div>\n</li>\n</ul>\n<h2 id=\"fetch\" style=\"position:relative;\"><a href=\"#fetch\" aria-label=\"fetch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fetch</h2>\n<ul>\n<li>서버에 있는 git history를 받아와서 나의 git history에 업데이트 하지만 HEAD는 그대로 유지된다.</li>\n<li>서버에서 어떤 일이 발생하고 있는지 확인하고 싶을 때 사용하기 좋다.</li>\n<li>사용 방법\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  // 서버에 있는 git history를 모두 들고오기\n  git fetch\n  // 특정 브랜치에 있는 history만 들고오기\n  git fetch (특정 브랜치)</code></pre></div>\n</li>\n</ul>\n<h2 id=\"pull\" style=\"position:relative;\"><a href=\"#pull\" aria-label=\"pull permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pull</h2>\n<ul>\n<li>서버에 있는 git history를 가지고 오면서 HEAD도 서버 최신 커밋으로 바뀐다.</li>\n<li>서버에 있는 내용을 받아와서 로컬 버전도 서버와 동일하게 하고 싶을 때 사용한다.</li>\n<li>사용 방법\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git pull</code></pre></div>\n</li>\n</ul>\n<h1 id=\"trouble-shooting\" style=\"position:relative;\"><a href=\"#trouble-shooting\" aria-label=\"trouble shooting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trouble Shooting</h1>\n<ul>\n<li>로컬과 서버에서 각각 동일한 파일을 수정했을 때, 서로 새로운 커밋이 있는 경우, 로컬에 있는 커밋을 아직 서버에 올리지 않았을 때 사용할 수 있는 방법\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  git pull --rebase\n  git mergetool\n  // 수정 후\n  git rebase --continue</code></pre></div>\n</li>\n</ul>","excerpt":"목표 버전 관리가 무엇인지 설명할 수 있다. Git의 동작 원리를 설명할 수 있다. Git의 기본 기능과 심화 기능을 실전에 사용할 수 있다. Git Git은 분산 버전 관리 도구이다. 분산 버전 관리 시스템(DVCS) 저장소를 히스토리와 더불어 ‘전부’ 복제한다. 만약 서버에 문제가 생기더라도 이 복제물로 다시 작업을 시작할 수 있다. 리모트 저장소가 존해하여 사람들이 동시에 다양한 방법으로 협업할 수 있다. Git의 목표 빠른 속도 단순한 구조 비선형적인 개발(동시 다발적인 브랜치) 완벽한 분산 Linux 커널 같은 대형 프로젝트에도 유용할 것 Git의 기초 다른 버전 관리 시스템(VCS)과 Git의 가장 큰 차이점은 에 있다. 큰 틀에서 봤을 때 VCS 대부분은 관리하는 정보가 파일들의 목록이다. 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리한다. 하지만 Git은 이런 식으로 데이터를 저장하지 않는다. 대신 Git은 데이터를 파일 시스템 스냅샷의 연속으로 취급하…","frontmatter":{"date":"February 21, 2023","title":"Git","categories":"git","author":"Steadystudy","emoji":"🔥"},"fields":{"slug":"/Git/Git/"}},"next":{"id":"be28a012-bd02-5a3c-bb9e-a116234a9e46","html":"<h2 id=\"문제의-발단\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%9D%98-%EB%B0%9C%EB%8B%A8\" aria-label=\"문제의 발단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제의 발단</h2>\n<p>topojson의 feature메서드를 통해 TopoJSON 데이터를 변환해 GeoJSON으로 반환하는 과정에서 type error가 발생했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import korea from './topoKorea.json';\nimport { feature } from 'topojson-client';\n\nfunction getGeoJSONData() {\n  return feature(korea, korea.objects['skorea_provinces_2018_geo']).features;\n}\n\nconsole.log(getGeoJSONData())</code></pre></div>\n<p>(콘솔 값은 제대로 나오지만, korea 타입에 에러가 발생한다.)</p>\n<h2 id=\"이유\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%9C%A0\" aria-label=\"이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이유</h2>\n<p>TypeScript에서 JSON을 가져오면 타입을 자동으로 유추하지만 @types/topojson은 여러 가지 이유로 자동 타입이 되지 않고 충돌하는 것으로 보입니다.</p>\n<h2 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h2>\n<p>올바른 타입으로 캐스팅하기 전에 unknown으로 먼저 캐스팅했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import korea from './topoKorea.json';\nimport { feature } from 'topojson-client';\nimport { GeometryObject, Topology } from 'topojson-specification';\nimport { FeatureCollection } from 'geojson';\n\nfunction getGeoJSONData() {\n  const featureCollection = feature(\n    korea as unknown as Topology,\n    korea.objects['skorea_provinces_2018_geo'] as GeometryObject,\n  ) as FeatureCollection;\n  return featureCollection.features;\n}</code></pre></div>\n<h2 id=\"참고문서\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%AC%B8%EC%84%9C\" aria-label=\"참고문서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고문서</h2>\n<p><a href=\"https://stackoverflow.com/questions/60367284/how-to-resolve-typescript-error-for-topojson-package\">https://stackoverflow.com/questions/60367284/how-to-resolve-typescript-error-for-topojson-package</a></p>","frontmatter":{"date":"January 22, 2023","title":"typescript에서 json파일 불러올 때 타입 오류","categories":"D3","author":"Steadystudy","emoji":"📓"},"fields":{"slug":"/D3/D3 type 오류/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://steadystudy.github.io","comments":{"utterances":{"repo":"Steadystudy/Steadystudy.github.io"}}}}},"pageContext":{"slug":"/Git/Git/","nextSlug":"/D3/D3 type 오류/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}